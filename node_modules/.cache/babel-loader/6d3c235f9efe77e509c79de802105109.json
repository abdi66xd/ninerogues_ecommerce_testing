{"ast":null,"code":"import { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, SET_AUTH_LOADING, REMOVE_AUTH_LOADING, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, REFRESH_SUCCESS, REFRESH_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, LOGOUT } from './types';\nimport { setAlert } from './alert';\nimport axios from 'axios';\nexport const check_authenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n    if (res.status === 201) {\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data\n      });\n      dispatch(setAlert('Te enviamos un correo, por favor activa tu cuenta. Revisa el correo de spam', 'green'));\n    } else {\n      dispatch({\n        type: SIGNUP_FAIL\n      });\n      dispatch(setAlert('Error al crear cuenta', 'red'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error conectando con el servidor, intenta mas tarde.', 'red'));\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: USER_LOADED_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: USER_LOADED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n    if (res.status === 200) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Inicio de sesión con éxito', 'green'));\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error al iniciar sesion.', 'red'));\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error al iniciar sesion. Intenta mas tarde', 'red'));\n  }\n};\nexport const activate = (uid, token) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n    if (res.status === 204) {\n      dispatch({\n        type: ACTIVATION_SUCCESS\n      });\n      dispatch(setAlert('Cuenta activada correctamente', 'green'));\n    } else {\n      dispatch({\n        type: ACTIVATION_FAIL\n      });\n      dispatch(setAlert('Error activando cuenta', 'red'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error al conectar con el servidor, intenta mas tarde.', 'red'));\n  }\n};\nexport const refresh = () => async dispatch => {\n  if (localStorage.getItem('refresh')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      refresh: localStorage.getItem('refresh')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh/`, body, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: REFRESH_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: REFRESH_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: REFRESH_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: REFRESH_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n    if (res.status === 204) {\n      dispatch({\n        type: RESET_PASSWORD_SUCCESS\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Password reset email sent', 'green'));\n    } else {\n      dispatch({\n        type: RESET_PASSWORD_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error sending password reset email', 'red'));\n    }\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error sending password reset email', 'red'));\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  if (new_password !== re_new_password) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Passwords do not match', 'red'));\n  } else {\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n      if (res.status === 204) {\n        dispatch({\n          type: RESET_PASSWORD_CONFIRM_SUCCESS\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Password has been reset successfully', 'green'));\n      } else {\n        dispatch({\n          type: RESET_PASSWORD_CONFIRM_FAIL\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error resetting your password', 'red'));\n      }\n    } catch (err) {\n      dispatch({\n        type: RESET_PASSWORD_CONFIRM_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error resetting your password', 'red'));\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch(setAlert('Succesfully logged out', 'green'));\n};","map":{"version":3,"sources":["D:/tutos/ninerogues_ecommerce/src/redux/actions/auth.js"],"names":["SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","SET_AUTH_LOADING","REMOVE_AUTH_LOADING","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","REFRESH_SUCCESS","REFRESH_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","LOGOUT","setAlert","axios","check_authenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","status","type","err","signup","first_name","last_name","email","password","re_password","payload","data","load_user","get","login","activate","uid","refresh","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import {\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    SET_AUTH_LOADING,\r\n    REMOVE_AUTH_LOADING,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    REFRESH_SUCCESS,\r\n    REFRESH_FAIL,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAIL,\r\n    RESET_PASSWORD_CONFIRM_SUCCESS,\r\n    RESET_PASSWORD_CONFIRM_FAIL,\r\n    LOGOUT\r\n} from './types'\r\nimport { setAlert } from './alert';\r\nimport axios from 'axios'\r\n\r\nexport const check_authenticated = () => async dispatch => {\r\n    if(localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({\r\n            token: localStorage.getItem('access')\r\n        });\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\r\n\r\n            if (res.status === 200) {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n        } catch(err){\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n}\r\n\r\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        first_name,\r\n        last_name,\r\n        email,\r\n        password,\r\n        re_password\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\r\n\r\n        if (res.status === 201) {\r\n            dispatch({\r\n                type: SIGNUP_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(setAlert('Te enviamos un correo, por favor activa tu cuenta. Revisa el correo de spam','green'))\r\n        } else {\r\n            dispatch({\r\n                type: SIGNUP_FAIL\r\n            });\r\n            dispatch(setAlert('Error al crear cuenta', 'red'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error conectando con el servidor, intenta mas tarde.', 'red'));\r\n    }\r\n};\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if(localStorage.getItem('access')){\r\n        const config = {\r\n            headers: {\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n        \r\n            if (res.status === 200) {\r\n                dispatch({\r\n                    type: USER_LOADED_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: USER_LOADED_FAIL\r\n                });\r\n            }\r\n        }\r\n        catch(err){\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n}\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        email,\r\n        password\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n    \r\n        if (res.status === 200) {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(load_user());\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Inicio de sesión con éxito', 'green'));\r\n        } else {\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error al iniciar sesion.', 'red'));\r\n        }\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error al iniciar sesion. Intenta mas tarde', 'red'));\r\n    }\r\n}\r\n\r\nexport const activate = (uid, token) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        uid,\r\n        token\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\r\n    \r\n        if (res.status === 204) {\r\n            dispatch({\r\n                type: ACTIVATION_SUCCESS\r\n            });\r\n            dispatch(setAlert('Cuenta activada correctamente', 'green'));\r\n        } else {\r\n            dispatch({\r\n                type: ACTIVATION_FAIL\r\n            });\r\n            dispatch(setAlert('Error activando cuenta', 'red'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error al conectar con el servidor, intenta mas tarde.', 'red'));\r\n    }\r\n};\r\n\r\nexport const refresh = () => async dispatch => {\r\n    if (localStorage.getItem('refresh')) {\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({\r\n            refresh: localStorage.getItem('refresh')\r\n        });\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh/`, body, config);\r\n            \r\n            if (res.status === 200) {\r\n                dispatch({\r\n                    type: REFRESH_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: REFRESH_FAIL\r\n                });\r\n            }\r\n        }catch(err){\r\n            dispatch({\r\n                type: REFRESH_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: REFRESH_FAIL\r\n        });\r\n    }\r\n}\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email });\r\n\r\n    try{\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n        \r\n        if (res.status === 204) {\r\n            dispatch({\r\n                type: RESET_PASSWORD_SUCCESS\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Password reset email sent', 'green'));\r\n        } else {\r\n            dispatch({\r\n                type: RESET_PASSWORD_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error sending password reset email', 'red'));\r\n        }\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: RESET_PASSWORD_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error sending password reset email', 'red'));\r\n    }\r\n}\r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        uid,\r\n        token,\r\n        new_password,\r\n        re_new_password\r\n    });\r\n\r\n    if (new_password !== re_new_password) {\r\n        dispatch({\r\n            type: RESET_PASSWORD_CONFIRM_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Passwords do not match', 'red'));\r\n    } else {\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n        \r\n            if (res.status === 204) {\r\n                dispatch({\r\n                    type: RESET_PASSWORD_CONFIRM_SUCCESS\r\n                });\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Password has been reset successfully', 'green'));\r\n            } else {\r\n                dispatch({\r\n                    type: RESET_PASSWORD_CONFIRM_FAIL\r\n                });\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Error resetting your password', 'red'));\r\n            }\r\n        } catch(err){\r\n            dispatch({\r\n                type: RESET_PASSWORD_CONFIRM_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error resetting your password', 'red'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n    dispatch(setAlert('Succesfully logged out', 'green'));\r\n}"]},"metadata":{},"sourceType":"module"}